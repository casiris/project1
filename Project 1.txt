						Project 1

Make sure you will work with all the rest standards (return httpstatus code, exceptioon, logging etc)
Web API / Rest API Project
	We need to create the REST API Service 

	
An App, which will help customer to feel the virtual energy
(Online shopping, Restaurant APP, Cab Booking app)

Functionalities

API shoule be able to perform the following operations
	should be able to add new customer
	search the customer
	view list of customers
	Place an order for customer (eg. book a cab for customer when they call customer care)
			-for this, i'll need to input the customer id, product id, quantity ordered, and then make two separate queries to insert into the orders table and orderdetails tables separately with the appropriate data
	order history by customer	- search order table where customer id = x, simple enough, maybe sort by date
	display the details for the open orders / bookings	- not sure how to handle open orders exactly. i think i'll just go with orders less than a day old are open, and just pretend all orders are processed within 24 hours
	view the history of all the transactions for any customer	- basically the same as order history? i don't see the difference here
	view the bill payable - Invoice  for a customer

	All the search to be based on the customerID or OrderId

--------------
Additional Mandatory Features
Exception Handling (throw appropriate error message)
Validations			-- only need try/catches to send a 400 error, not necessarily looping until the user enters a valid input 
No hard coded data anywhere in the code
all the data to be persisted to database
Database should be normalized upto 3NF
you need to have an ER diagram for the same for the data

----
Self Research, learn and implement
Logging - Serilog (this is very easy to implemennt) - log everything to db





_______________________________________________________


API

_______________________________________________________


ASP.NET WebAPI (model and controller, no view). model talks to the database, does whatever with the data, controller listens to requests
-swagger page is enough

also have to do a powerpoint, great...
draw.io for Entity Relationship diagram (database structure diagram)










	